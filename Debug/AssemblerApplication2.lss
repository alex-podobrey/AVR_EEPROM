
AVRASM ver. 2.1.57  E:\Проекты\AVR_ASM\EEPROM\AssemblerApplication2.asm Fri May 08 19:22:37 2015

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.1175\avrassembler\Include\m168def.inc'
E:\Проекты\AVR_ASM\EEPROM\AssemblerApplication2.asm(24): Including file 'E:\Проекты\AVR_ASM\EEPROM\macros.inc'
E:\Проекты\AVR_ASM\EEPROM\AssemblerApplication2.asm(30): Including file 'E:\Проекты\AVR_ASM\EEPROM\IntVectorsTable.inc'
E:\Проекты\AVR_ASM\EEPROM\AssemblerApplication2.asm(32): Including file 'E:\Проекты\AVR_ASM\EEPROM\TaskQueue.inc'
E:\Проекты\AVR_ASM\EEPROM\AssemblerApplication2.asm(54): Including file 'E:\Проекты\AVR_ASM\EEPROM\eeprom.inc'
                 
                 /*
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega168.xml ***********
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m168def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega168
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega168
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M168DEF_INC_
                 #define _M168DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega168
                 #pragma AVRPART ADMIN PART_NAME ATmega168
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x94
                 .equ	SIGNATURE_002	= 0x06
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                 .equ	PRR	= 0x64	; MEMORY MAPPED
                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	SPMCSR	= 0x37
                 .equ	MCUCR	= 0x35
                 .equ	MCUSR	= 0x34
                 .equ	SMCR	= 0x33
                 .equ	ACSR	= 0x30
                 .equ	SPDR	= 0x2e
                 .equ	SPSR	= 0x2d
                 .equ	SPCR	= 0x2c
                 .equ	GPIOR2	= 0x2b
                 .equ	GPIOR1	= 0x2a
                 .equ	OCR0B	= 0x28
                 .equ	OCR0A	= 0x27
                 .equ	TCNT0	= 0x26
                 .equ	TCCR0B	= 0x25
                 .equ	TCCR0A	= 0x24
                 .equ	GTCCR	= 0x23
                 .equ	EEARH	= 0x22
                 .equ	EEARL	= 0x21
                 .equ	EEDR	= 0x20
                 .equ	EECR	= 0x1f
                 .equ	GPIOR0	= 0x1e
                 .equ	EIMSK	= 0x1d
                 .equ	EIFR	= 0x1c
                 .equ	PCIFR	= 0x1b
                 .equ	TIFR2	= 0x17
                 .equ	TIFR1	= 0x16
                 .equ	TIFR0	= 0x15
                 .equ	PORTD	= 0x0b
                 .equ	DDRD	= 0x0a
                 .equ	PIND	= 0x09
                 .equ	PORTC	= 0x08
                 .equ	DDRC	= 0x07
                 .equ	PINC	= 0x06
                 .equ	PORTB	= 0x05
                 .equ	DDRB	= 0x04
                 .equ	PINB	= 0x03
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** USART0 ***********************
                 ; UDR0 - USART I/O Data Register
                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSR0A - USART Control and Status Register A
                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                 .equ	U2X0	= 1	; Double the USART transmission speed
                 .equ	UPE0	= 2	; Parity Error
                 .equ	DOR0	= 3	; Data overRun
                 .equ	FE0	= 4	; Framing Error
                 .equ	UDRE0	= 5	; USART Data Register Empty
                 .equ	TXC0	= 6	; USART Transmitt Complete
                 .equ	RXC0	= 7	; USART Receive Complete
                 
                 ; UCSR0B - USART Control and Status Register B
                 .equ	TXB80	= 0	; Transmit Data Bit 8
                 .equ	RXB80	= 1	; Receive Data Bit 8
                 .equ	UCSZ02	= 2	; Character Size
                 .equ	TXEN0	= 3	; Transmitter Enable
                 .equ	RXEN0	= 4	; Receiver Enable
                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSR0C - USART Control and Status Register C
                 .equ	UCPOL0	= 0	; Clock Polarity
                 .equ	UCSZ00	= 1	; Character Size
                 .equ	UCPHA0	= UCSZ00	; For compatibility
                 .equ	UCSZ01	= 2	; Character Size
                 .equ	UDORD0	= UCSZ01	; For compatibility
                 .equ	USBS0	= 3	; Stop Bit Select
                 .equ	UPM00	= 4	; Parity Mode Bit 0
                 .equ	UPM01	= 5	; Parity Mode Bit 1
                 .equ	UMSEL00	= 6	; USART Mode Select
                 .equ	UMSEL0	= UMSEL00	; For compatibility
                 .equ	UMSEL01	= 7	; USART Mode Select
                 .equ	UMSEL1	= UMSEL01	; For compatibility
                 
                 ; UBRR0H - USART Baud Rate Register High Byte
                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                 
                 ; UBRR0L - USART Baud Rate Register Low Byte
                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                 
                 
                 ; ***** TWI **************************
                 ; TWAMR - TWI (Slave) Address Mask Register
                 .equ	TWAM0	= 1	; 
                 .equ	TWAMR0	= TWAM0	; For compatibility
                 .equ	TWAM1	= 2	; 
                 .equ	TWAMR1	= TWAM1	; For compatibility
                 .equ	TWAM2	= 3	; 
                 .equ	TWAMR2	= TWAM2	; For compatibility
                 .equ	TWAM3	= 4	; 
                 .equ	TWAMR3	= TWAM3	; For compatibility
                 .equ	TWAM4	= 5	; 
                 .equ	TWAMR4	= TWAM4	; For compatibility
                 .equ	TWAM5	= 6	; 
                 .equ	TWAMR5	= TWAM5	; For compatibility
                 .equ	TWAM6	= 7	; 
                 .equ	TWAMR6	= TWAM6	; For compatibility
                 
                 ; TWBR - TWI Bit Rate register
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 
                 ; TWSR - TWI Status Register
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS3	= 3	; TWI Status
                 .equ	TWS4	= 4	; TWI Status
                 .equ	TWS5	= 5	; TWI Status
                 .equ	TWS6	= 6	; TWI Status
                 .equ	TWS7	= 7	; TWI Status
                 
                 ; TWDR - TWI Data register
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR1 - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 ; TCCR1C - Timer/Counter1 Control Register C
                 .equ	FOC1B	= 6	; 
                 .equ	FOC1A	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	TOIE2A	= TOIE2	; For compatibility
                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                 
                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                 
                 ; TCCR2A - Timer/Counter2 Control Register A
                 .equ	WGM20	= 0	; Waveform Genration Mode
                 .equ	WGM21	= 1	; Waveform Genration Mode
                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                 
                 ; TCCR2B - Timer/Counter2 Control Register B
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM22	= 3	; Waveform Generation Mode
                 .equ	FOC2B	= 6	; Force Output Compare B
                 .equ	FOC2A	= 7	; Force Output Compare A
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2A - Timer/Counter2 Output Compare Register A
                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; OCR2B - Timer/Counter2 Output Compare Register B
                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                 .equ	EXCLK	= 6	; Enable External Clock Input
                 
                 ; GTCCR - General Timer Counter Control register
                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                 .equ	PSR2	= PSRASY	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register A
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCSRB - The ADC Control and Status register B
                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                 .equ	ACME	= 6	; 
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; DIDR0 - Digital Input Disable Register
                 .equ	ADC0D	= 0	; 
                 .equ	ADC1D	= 1	; 
                 .equ	ADC2D	= 2	; 
                 .equ	ADC3D	= 3	; 
                 .equ	ADC4D	= 4	; 
                 .equ	ADC5D	= 5	; 
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 ; DIDR1 - Digital Input Disable Register 1
                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                 
                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                 
                 ; TCCR0A - Timer/Counter  Control Register A
                 .equ	WGM00	= 0	; Waveform Generation Mode
                 .equ	WGM01	= 1	; Waveform Generation Mode
                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                 
                 ; TCCR0B - Timer/Counter Control Register B
                 .equ	CS00	= 0	; Clock Select
                 .equ	CS01	= 1	; Clock Select
                 .equ	CS02	= 2	; Clock Select
                 .equ	WGM02	= 3	; 
                 .equ	FOC0B	= 6	; Force Output Compare B
                 .equ	FOC0A	= 7	; Force Output Compare A
                 
                 ; TCNT0 - Timer/Counter0
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0A - Timer/Counter0 Output Compare Register
                 .equ	OCR0A_0	= 0	; 
                 .equ	OCR0A_1	= 1	; 
                 .equ	OCR0A_2	= 2	; 
                 .equ	OCR0A_3	= 3	; 
                 .equ	OCR0A_4	= 4	; 
                 .equ	OCR0A_5	= 5	; 
                 .equ	OCR0A_6	= 6	; 
                 .equ	OCR0A_7	= 7	; 
                 
                 ; OCR0B - Timer/Counter0 Output Compare Register
                 .equ	OCR0B_0	= 0	; 
                 .equ	OCR0B_1	= 1	; 
                 .equ	OCR0B_2	= 2	; 
                 .equ	OCR0B_3	= 3	; 
                 .equ	OCR0B_4	= 4	; 
                 .equ	OCR0B_5	= 5	; 
                 .equ	OCR0B_6	= 6	; 
                 .equ	OCR0B_7	= 7	; 
                 
                 ; GTCCR - General Timer/Counter Control Register
                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 .equ	PSR10	= PSRSYNC	; For compatibility
                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; EICRA - External Interrupt Control Register
                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                 
                 ; EIMSK - External Interrupt Mask Register
                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                 
                 ; EIFR - External Interrupt Flag Register
                 .equ	INTF0	= 0	; External Interrupt Flag 0
                 .equ	INTF1	= 1	; External Interrupt Flag 1
                 
                 ; PCICR - Pin Change Interrupt Control Register
                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                 
                 ; PCMSK2 - Pin Change Mask Register 2
                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                 
                 ; PCMSK1 - Pin Change Mask Register 1
                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                 
                 ; PCMSK0 - Pin Change Mask Register 0
                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                 
                 ; PCIFR - Pin Change Interrupt Flag Register
                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; CLKPR - Clock Prescale Register
                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                 
                 ; SPMCSR - Store Program Memory Control and Status Register
                 .equ	SELFPRGEN	= 0	; Self Programming Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 .equ	IVCE	= 0	; 
                 .equ	IVSEL	= 1	; 
                 .equ	PUD	= 4	; 
                 
                 ; MCUSR - MCU Status Register
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	EXTREF	= EXTRF	; For compatibility
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 
                 ; SMCR - 
                 .equ	SE	= 0	; 
                 .equ	SM0	= 1	; 
                 .equ	SM1	= 2	; 
                 .equ	SM2	= 3	; 
                 
                 ; GPIOR2 - General Purpose I/O Register 2
                 .equ	GPIOR20	= 0	; 
                 .equ	GPIOR21	= 1	; 
                 .equ	GPIOR22	= 2	; 
                 .equ	GPIOR23	= 3	; 
                 .equ	GPIOR24	= 4	; 
                 .equ	GPIOR25	= 5	; 
                 .equ	GPIOR26	= 6	; 
                 .equ	GPIOR27	= 7	; 
                 
                 ; GPIOR1 - General Purpose I/O Register 1
                 .equ	GPIOR10	= 0	; 
                 .equ	GPIOR11	= 1	; 
                 .equ	GPIOR12	= 2	; 
                 .equ	GPIOR13	= 3	; 
                 .equ	GPIOR14	= 4	; 
                 .equ	GPIOR15	= 5	; 
                 .equ	GPIOR16	= 6	; 
                 .equ	GPIOR17	= 7	; 
                 
                 ; GPIOR0 - General Purpose I/O Register 0
                 .equ	GPIOR00	= 0	; 
                 .equ	GPIOR01	= 1	; 
                 .equ	GPIOR02	= 2	; 
                 .equ	GPIOR03	= 3	; 
                 .equ	GPIOR04	= 4	; 
                 .equ	GPIOR05	= 5	; 
                 .equ	GPIOR06	= 6	; 
                 .equ	GPIOR07	= 7	; 
                 
                 ; PRR - Power Reduction Register
                 .equ	PRADC	= 0	; Power Reduction ADC
                 .equ	PRUSART0	= 1	; Power Reduction USART
                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                 .equ	PRTWI	= 7	; Power Reduction TWI
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCSR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDCE	= 4	; Watchdog Change Enable
                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEARL - EEPROM Address Register Low Byte
                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                 
                 ; EEARH - EEPROM Address Register High Byte
                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 0
                 
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEPE	= 1	; EEPROM Write Enable
                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	CKOUT	= 6	; Clock output
                 .equ	CKDIV8	= 7	; Divide clock by 8
                 
                 ; HIGH fuse bits
                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	WDTON	= 4	; Watchdog Timer Always On
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	DWEN	= 6	; debugWIRE Enable
                 .equ	RSTDISBL	= 7	; External reset disable
                 
                 ; EXTENDED fuse bits
                 .equ	BOOTRST	= 0	; Select reset vector
                 .equ	BOOTSZ0	= 1	; Select boot size
                 .equ	BOOTSZ1	= 2	; Select boot size
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                 .equ	IOEND	= 0x00ff
                 .equ	SRAM_START	= 0x0100
                 .equ	SRAM_SIZE	= 1024
                 .equ	RAMEND	= 0x04ff
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x01ff
                 .equ	EEPROMEND	= 0x01ff
                 .equ	EEADRBITS	= 9
                 #pragma AVRPART MEMORY PROG_FLASH 16384
                 #pragma AVRPART MEMORY EEPROM 512
                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x1c00
                 .equ	NRWW_STOP_ADDR	= 0x1fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x1bff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x1f80
                 .equ	SECONDBOOTSTART	= 0x1f00
                 .equ	THIRDBOOTSTART	= 0x1e00
                 .equ	FOURTHBOOTSTART	= 0x1c00
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                 
                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                 
                 #endif  /* _M168DEF_INC_ */
                 
                 ; ***** END OF FILE ******************************************************
                 
                  * AssemblerApplication2.asm
                  *
                  *  Created: 13.03.2015 0:22:13
                  *   Author: ???????
                  */ 
                 .equ F_CPU = 16000000
                 .equ ATMega = 1
                 
                 .equ TASK_COUNT = 1
                 
                 .equ TASKID_EEPROM = 0
                 
                 .equ LED_PORT = PORTB
                 .equ LED_PIN = 5
                 
                 .equ KEY_PINS = 0b00000001
                 .equ KEY_PIN = 0
                 .equ KEY_PORT = PINB
                 .equ KEY_INVERSE = 1
                 
                 ;=============================================== Макросы ===========================================
                 
                 .include "macros.inc"
                 
                 .endif
                 
                 .equ MACROS = 1
                 
                 .macro _out	; Port, R
                 
                    	.if	@0 < 0x40
                       	out	@0, @1         
                 	.else
                       	sts	@0, @1
                    	.endif
                 
                 .endm
                 	
                 .macro _in	; R, Port
                 
                    	.if	@1 < 0x40
                       	in	@0, @1         
                 	.else
                       	lds	@0, @1
                 	.endif
                 
                 .endm
                 
                 .macro _ClearMemory	; Address, Size
                 
                 	clr R16
                 	ldi R17, @1
                 	ldi ZL, Low(@0)
                 	ldi ZH, High(@0)
                 
                 Loop:
                 	st Z+, R16
                 	dec R17
                 	brne Loop
                 
                 .endm
                 
                 ; Инициализация стека
                 .macro _InitStack
                 
                 	.if RAMEND >= 256
                 		ldi R16, Low(RAMEND)
                 		out SPL, R16
                 		ldi R16, High(RAMEND)
                 		out SPH, R16
                 	.else
                 		ldi R16, RAMEND
                 		out SP, R16
                 	.endif
                 
                 .endm
                 
                 .macro _outW ; Port(L), RegL, RegH
                 
                 	out @0 + 1, @2
                 	out @0, @1
                 
                 .endm
                 
                 .macro _inW	; RegL, RegH, Port(L)
                 
                 	in @0, @2
                 	in @1, @2 + 1
                 
                 .endm
                 
                 ;============================================ CODE Segment ========================================
                 
                 .CSEG
                 
                 .include "IntVectorsTable.inc"
                 
                 
                 .ORG 0
000000 940c 0034 	jmp Start
                 
                 .ORG INT0addr	; External Interrupt Request 0
000002 9518      	reti
                 
                 .ORG INT1addr	; External Interrupt Request 1
000004 9518      	reti
                 
                 .ORG PCI0addr	; Pin Change Interrupt Request 0
000006 9518      	reti
                 
                 .ORG PCI1addr	; Pin Change Interrupt Request 1
000008 9518      	reti
                 
                 .ORG PCI2addr	; Pin Change Interrupt Request 2
00000a 9518      	reti
                 
                 .ORG WDTaddr	; Watchdog Time-out Interrupt
00000c 9518      	reti
                 
                 .ORG OC2Aaddr	; Timer/Counter2 Compare Match A
00000e 940c 00ca 	jmp Timer_ISR
                 
                 .ORG OC2Baddr	; Timer/Counter2 Compare Match B
000010 9518      	reti
                 
                 .ORG OVF2addr	; Timer/Counter2 Overflow
000012 9518      	reti
                 
                 .ORG ICP1addr	; Timer/Counter1 Capture Event
000014 9518      	reti
                 
                 .ORG OC1Aaddr	; Timer/Counter1 Compare Match A
000016 9518      	reti
                 
                 .ORG OC1Baddr	; Timer/Counter1 Compare Match B
000018 9518      	reti
                 
                 .ORG OVF1addr	; Timer/Counter1 Overflow
00001a 9518      	reti
                 
                 .ORG OC0Aaddr	; TimerCounter0 Compare Match A
00001c 9518      	reti
                 
                 .ORG OC0Baddr	; TimerCounter0 Compare Match B
00001e 9518      	reti
                 
                 .ORG OVF0addr	; Timer/Couner0 Overflow
000020 9518      	reti
                 
                 .ORG SPIaddr	; SPI Serial Transfer Complete
000022 9518      	reti
                 
                 .ORG URXCaddr	; USART Rx Complete
000024 9518      	reti
                 
                 .ORG UDREaddr	; USART, Data Register Empty
000026 9518      	reti
                 
                 .ORG UTXCaddr	; USART Tx Complete
000028 9518      	reti
                 
                 .ORG ADCCaddr	; ADC Conversion Complete
00002a 9518      	reti
                 
                 .ORG ERDYaddr	; EEPROM Ready
00002c 9518      	reti
                 
                 .ORG ACIaddr	; Analog Comparator
00002e 9518      	reti
                 
                 .ORG TWIaddr	; Two-wire Serial Interface
000030 9518      	reti
                 
                 .ORG SPMRaddr	; Store Program Memory Read
000032 9518      	reti
                 
                 
                 .include "TaskQueue.inc"
                 
                 	State			.db	Текущее состояние задачи. Бит TASK_STATE_ACTIVE_BIT = 1 - задача активна, бит TASK_STATE_CONT_BIT = 1 - задача выполняется постояно (после выполнения ее состояние не сбрасывается)
                 	RoutineAddress	.dw	Адрес процедуры обработки
                 	Delay			.dw	Период выполнения, если бит TASK_STATE_CONT_BIT установлен
                 	TimerCounter	.dw Текущее состояние таймера
                 */
                 
                 /* Структура массива задач
                 
                 	Flags			.db Флаги состояния очереди задач. Бит TASKS_UPDATED_BIT = 1 - задачи обновлены, необходимо еще раз их обработать
                 	TaskId			.db Номер текущей выполняемой задачи
                 
                 	Массив структур описаний задач
                 
                 */
                 
                 .equ TASKS_UPDATED_BIT = 0
                 .equ TASK_STATE_ACTIVE_BIT = 0
                 .equ TASK_STATE_CONT_BIT = 1
                 .equ TASK_STATE_DELAYED_BIT = 2
                 
                 .equ TASK_DATA_SIZE = 7
                 .equ TASKS_DATA_SIZE = TASK_DATA_SIZE * TASK_COUNT + 2
                 
                 .equ TIME_COUNTER = 1
                 .equ TIME_COUNTER_SIZE = 6
                 
                 .macro _AddTask	; TaskId, Task routine, Task state, Repeat delay
                 
                 	.if @0 >= TASK_COUNT
                 		.error "Invalid task number"
                 	.else
                 		ldi ZL, Low(TasksData + 2 + (@0 * TASK_DATA_SIZE))
                 		ldi ZH, High(TasksData + 2 + (@0 * TASK_DATA_SIZE))
                 
                 		ldi R16, @2
                 		st Z+, R16
                 
                 		ldi R16, Low(@1)
                 		st Z+, R16
                 		ldi R16, High(@1)
                 		st Z+, R16
                 
                 		.if @3 == 0
                 			clr R16
                 			st Z+, R16
                 			st Z+, R16
                 		.else
                 			ldi R16, Low(@3)
                 			st Z+, R16
                 			ldi R16, High(@3)
                 			st Z+, R16
                 			clr R16
                 		.endif
                 		st Z+, R16
                 		st Z, R16
                 	.endif
                 
                 .endm
                 
                 .macro _SetTaskTimer	;TaskId, Timer value
                 
                 	.if @0 >= TASK_COUNT
                 		.error "Invalid task number"
                 	.else
                 		.if @1 == 0
                 			clr R16
                 			sts (TasksData + 2 + (@0 * TASK_DATA_SIZE) + 5), R16
                 			sts (TasksData + 2 + (@0 * TASK_DATA_SIZE) + 6), R16
                 		.else
                 			ldi R16, Low(@1)
                 			sts (TasksData + 2 + (@0 * TASK_DATA_SIZE) + 5), R16
                 			ldi R16, High(@1)
                 			sts (TasksData + 2 + (@0 * TASK_DATA_SIZE) + 6), R16
                 		.endif
                 	.endif
                 
                 .endm
                 
                 .macro _ActivateTaskAndSetTimer	;TaskId, Timer value
                 
                 	.if @0 >= TASK_COUNT
                 		.error "Invalid task number"
                 	.else
                 		lds R16, (TasksData + 2 + (@0 * TASK_DATA_SIZE))		; активируем задачу
                 		sbr R16, 1<<TASK_STATE_ACTIVE_BIT
                 		sts (TasksData + 2 + (@0 * TASK_DATA_SIZE)), R16
                 
                 		; устанавливаем таймер
                 		.if @1 == 0
                 			clr R16
                 			sts (TasksData + 2 + (@0 * TASK_DATA_SIZE) + 5), R16
                 			sts (TasksData + 2 + (@0 * TASK_DATA_SIZE) + 6), R16
                 
                 			; если таймер = 0 (задача должна выполниться немедленно), то устанавливаем флаг обновления очереди задач, чтобы пересканировать ее заново
                 			lds R16, TasksData
                 			sbr R16, 1<<TASKS_UPDATED_BIT
                 			sts TasksData, R16
                 		.else
                 			ldi R16, Low(@1)
                 			sts (TasksData + 2 + (@0 * TASK_DATA_SIZE) + 5), R16
                 			ldi R16, High(@1)
                 			sts (TasksData + 2 + (@0 * TASK_DATA_SIZE) + 6), R16
                 		.endif
                 	.endif
                 
                 .endm
                 
                 .macro _DelayTask	; Delay
                 
                 	ldi R16, Low(@0)
                 	ldi R17, High(@0)
                 	call Delay
                 
                 .endm
                 
                 .macro _ActivateTask	;TaskId
                 
                 	.if @0 >= TASK_COUNT
                 		.error "Invalid task number"
                 	.else
                 		lds R16, (TasksData + 2 + (@0 * TASK_DATA_SIZE))
                 		sbr R16, 1<<TASK_STATE_ACTIVE_BIT
                 		sts (TasksData + 2 + (@0 * TASK_DATA_SIZE)), R16
                 	.endif
                 
                 .endm
                 
                 .macro _DeactivateTask	;TaskId
                 
                 	.if @0 >= TASK_COUNT
                 		.error "Invalid task number"
                 	.else
                 		lds R16, (TasksData + 2 + (@0 * TASK_DATA_SIZE))
                 		cbr R16, 1<<TASK_STATE_ACTIVE_BIT
                 		sts (TasksData + 2 + (@0 * TASK_DATA_SIZE)), R16
                 	.endif
                 
                 .endm
                 
                 .DSEG
000100           	TasksData: .byte TASKS_DATA_SIZE
                 	.ifdef TIME_COUNTER
                 		.if TIME_COUNTER != 0
000109           			TimeCounter: .byte TIME_COUNTER_SIZE
                 		.endif
                 	.endif
                 
                 .CSEG
                 .ORG INT_VECTORS_SIZE
                 
                 Start:
000034 ef0f
000035 bf0d
000036 e004
000037 bf0e      	_InitStack
                 
                 ;============================================= настройка периферии =======================================
                 
                 	; настройка таймера 2
                 	; режим CTC, делитель 64, предел счета на 250 (на частоте 16 МГц), период срабатывания 1 мс
000038 e002      	ldi R16, (0<<COM2A1)|(0<<COM2A0)|(0<<COM2B1)|(0<<COM2B0)|(1<<WGM21)|(0<<WGM20)
000039 9300 00b0 	_out TCCR2A, R16
00003b e004      	ldi R16, (0<<WGM22)|(1<<CS22)|(0<<CS21)|(0<<CS20)
00003c 9300 00b1 	_out TCCR2B, R16
00003e 2700      	clr R16
00003f 9300 00b2 	_out TCNT2, R16
000041 ef09      	ldi R16, (F_CPU / 1000 / 64) - 1
000042 9300 00b3 	_out OCR2A, R16
000044 e002      	ldi R16, (1<<OCIE2A)|(0<<OCIE2B)|(0<<TOIE2)
000045 9300 0070 	_out TIMSK2, R16
                 
                 	; Инициализация сторожевого таймера
                 	; режим сброса по таймеру через 64 мс
000047 95a8      	wdr
000048 9100 0060 	_in R16, WDTCSR
00004a 6108      	ori R16, (1<<WDCE)|(0<<WDIE)|(1<<WDE)
00004b 9300 0060 	_out WDTCSR, R16
00004d e00a      	ldi R16, (0<<WDIE)|(1<<WDE)|(0<<WDP3)|(0<<WDP2)|(1<<WDP1)|(0<<WDP0)
00004e 9300 0060 	_out WDTCSR, R16
                 
                 	; настройка режима энергосбережения
                 	; режим Extended Standby
000050 e00f      	ldi R16, (1<<SM2)|(1<<SM1)|(1<<SM0)|(1<<SE)
000051 bf03      	_out SMCR, R16
                 
                 ;=====================================  инициализация переменных ===================================
                 
000052 2700
000053 e019
000054 e0e0
000055 e0f1
000056 9301
000057 951a
000058 f7e9      	_ClearMemory TasksData, TASKS_DATA_SIZE
                 
                 	.ifdef TIME_COUNTER
                 		.if TIME_COUNTER != 0
000059 2700
00005a e016
00005b e0e9
00005c e0f1
00005d 9301
00005e 951a
00005f f7e9      			_ClearMemory TimeCounter, TIME_COUNTER_SIZE
                 		.endif
                 	.endif
                 
000060 940e 00f4 	call Init
                 
000062 9478      	sei
                 
                 ;=====================================  главный цикл программы =====================================
                 
                 MainLoop:
000063 95a8      	wdr
                 
000064 e041      	ldi R20, TASK_COUNT		; количество задач
000065 2344      	tst R20
000066 f3e1      	breq MainLoop
                 
000067 e0c2      	ldi YL, Low(TasksData + 2)
000068 e0d1      	ldi YH, High(TasksData + 2)
                 
                 TaskLoop:
000069 8128      	ld R18, Y							; проверка состояния задачи
00006a e035      	ldi R19, (1<<TASK_STATE_ACTIVE_BIT)|(1<<TASK_STATE_DELAYED_BIT)
00006b 2332      	and R19, R18						; задача неактивна и не отложена - переходим к следующей
00006c f111      	breq NextTask
                 
00006d 94f8      	cli
00006e 810d      	ldd R16, Y + 5						; проверка таймера задачи. Больше нуля - переход к следующей задаче
00006f 811e      	ldd R17, Y + 6
000070 9478      	sei
000071 2b01      	or R16, R17
000072 f4e1      	brne NextTask
                 	
000073 e001      	ldi R16, TASK_COUNT					; сохраним текущий TaskId
000074 1b04      	sub R16, R20
000075 9300 0101 	sts TasksData + 1, R16
                 
000077 fd21      	sbrc R18, TASK_STATE_CONT_BIT		; Проверка на непрерывность использования задачи
000078 c003      	rjmp RefreshTaskTimer				; если задача повторяемая, то восстанавливаем значение таймера
                 
000079 7f2e      	cbr R18, 1<<TASK_STATE_ACTIVE_BIT	; иначе делаем задачу неактивной
00007a 8328      	st Y, R18
00007b c008      	rjmp CheckDelayedTask
                 
                 RefreshTaskTimer:
00007c 94f8      	cli
00007d 810b      	ldd R16, Y + 3						; восстанавливаем значение таймера по умолчанию
00007e 811c      	ldd R17, Y + 4
00007f 830d      	std Y + 5, R16
000080 831e      	std Y + 6, R17
000081 9478      	sei
000082 6021      	sbr R18, 1<<TASK_STATE_ACTIVE_BIT	; восстанавливаем бит активности задачи
000083 8328      	st Y, R18
                 
                 CheckDelayedTask:
000084 fd22      	sbrc R18, TASK_STATE_DELAYED_BIT	; Проверка на непрерывность использования задачи
000085 c032      	rjmp EndDelay						; Если установлен бит TASK_STATE_DELAYED_BIT - выходим из главного цикла
                 
                 CallTask:
000086 81e9      	ldd ZL, Y + 1
000087 81fa      	ldd ZH, Y + 2
                 
000088 934f      	push R20
000089 93cf      	push YL
00008a 93df      	push YH
00008b 9509      	icall								; вызов обрабочика задачи
00008c 91df      	pop YH
00008d 91cf      	pop YL
00008e 914f      	pop R20
                 
                 NextTask:
00008f 95a8      	wdr
                 
000090 9627      	adiw Y, TASK_DATA_SIZE
                 
000091 954a      	dec R20
000092 f6b1      	brne TaskLoop
                 
000093 9100 0100 	lds R16, TasksData		; если в процессе обработки очереди установлен бит необходимости обновления, то пересканирем очередь еще раз (засыпать  не будем)
000095 7f0e      	cbr R16, 1<<TASKS_UPDATED_BIT
000096 9300 0100 	sts TasksData, R16
000098 ff00      	sbrs R16, TASKS_UPDATED_BIT
                 
000099 9588      	sleep					; очередь обработана, спим
00009a cfc8      	rjmp MainLoop
                 
                 Delay:
                 	; R16:R17 - значение задержки
00009b 934f      	push R20
00009c 935f      	push R21
00009d 936f      	push R22
00009e 937f      	push R23
00009f 938f      	push R24
0000a0 939f      	push R25
0000a1 93af      	push XL
0000a2 93bf      	push XH
0000a3 93cf      	push YL
0000a4 93df      	push YH
0000a5 93ef      	push ZL
0000a6 93ff      	push ZH
                 
0000a7 e0c1      	ldi YL, Low(TasksData + 1)
0000a8 e0d1      	ldi YH, High(TasksData + 1)
0000a9 9129      	ld R18, Y+			; в R18 - номер текущей задачи
                 
                 	; получим смещение блока данных текущей задачи (номер задачи умножаем на 7)
                 	.ifdef ATMega
0000aa e037      		ldi R19, TASK_DATA_SIZE
0000ab 9f23      		mul R18, R19
0000ac 0dc0      		add YL, R0
0000ad 1dd1      		adc YH, R1
                 	.else					; в ATTiny нет операции умножения, реализуем ее через сдвиги и сложения
                 		.if TASK_DATA_SIZE != 7
                 		.endif
                 	.endif
                 
0000ae 94f8      	cli
0000af 8128      	ld R18, Y		; установим бит TASK_STATE_DELAYED_BIT в байте состояния задачи
0000b0 6024      	sbr R18, 1<<TASK_STATE_DELAYED_BIT
0000b1 8328      	st Y, R18
                 
0000b2 830d      	std Y + 5, R16	; запишем в таймер значение задержки
0000b3 831e      	std Y + 6, R17
0000b4 9478      	sei
                 
0000b5 93cf      	push YL
0000b6 93df      	push YH
0000b7 cfab      	rjmp MainLoop
                 
                 EndDelay:
0000b8 91df      	pop YH
0000b9 91cf      	pop YL
                 
0000ba 8128      	ld R18, Y		; сбросим бит TASK_STATE_DELAYED_BIT в байте состояния задачи
0000bb 7f2b      	cbr R18, 1<<TASK_STATE_DELAYED_BIT
0000bc 8328      	st Y, R18
                 
0000bd 91ff      	pop ZH
0000be 91ef      	pop ZL
0000bf 91df      	pop YH
0000c0 91cf      	pop YL
0000c1 91bf      	pop XH
0000c2 91af      	pop XL
0000c3 919f      	pop R25
0000c4 918f      	pop R24
0000c5 917f      	pop R23
0000c6 916f      	pop R22
0000c7 915f      	pop R21
0000c8 914f      	pop R20
                 
0000c9 9508      	ret
                 
                 ;============================================= ISR routines ========================================
                 
                 Timer_ISR:
                 
0000ca 934f      	push R20
                 
0000cb b74f      	in R20, SREG
0000cc 934f      	push R20
0000cd 93af      	push XL
0000ce 93bf      	push XH
0000cf 93cf      	push YL
0000d0 93df      	push YH
                 
                 	.ifdef TIME_COUNTER
                 		.if TIME_COUNTER != 0
                 			; Увеличиваем системный счетчик
0000d1 e0af      			ldi XL, Low(TimeCounter + TIME_COUNTER_SIZE)
0000d2 e0b1      			ldi XH, High(TimeCounter + TIME_COUNTER_SIZE)
                 
0000d3 e046      			ldi R20, TIME_COUNTER_SIZE
0000d4 9488      			clc
                 
                 		Timer_ISR_TimeCounter_NextByte:
0000d5 910e      			ld R16, -X
0000d6 4f0f      			sbci R16, -1			; сложения с константой нет, поэтому через вычитание. Значение флага C при этом инвертировано
0000d7 930c      			st X, R16
                 
0000d8 f010      			brcs Timer_ISR_TimeCounter_Exit		; в текущем байте нет переполнения - дальше продолжать нет смысла
                 
0000d9 954a      			dec R20
0000da f7d1      			brne Timer_ISR_TimeCounter_NextByte
                 
                 		Timer_ISR_TimeCounter_Exit:
                 		.endif
                 	.endif
                 	
0000db e041      	ldi R20, TASK_COUNT		; количество задач
0000dc 2344      	tst R20
0000dd f071      	breq TimerISR_NoTasks
                 
0000de e0c2      	ldi YL, Low(TasksData + 2)
0000df e0d1      	ldi YH, High(TasksData + 2)
                 
                 TimerISR_Loop:
0000e0 81a8      	ld XL, Y				; проверка состояния задачи - если у нее не установлены биты активности или отложенности - пропускаем
0000e1 70a5      	andi XL, (1<<TASK_STATE_ACTIVE_BIT)|(1<<TASK_STATE_DELAYED_BIT)
0000e2 f031      	breq TimerISR_NextTimer
                 
0000e3 81ad      	ldd XL, Y + 5
0000e4 81be      	ldd XH, Y + 6
0000e5 9711      	sbiw X, 1
0000e6 f010      	brcs TimerISR_NextTimer	; таймер уже равен нулю - пропускаем
                 
0000e7 83ad      	std Y + 5, XL			; записываем новое состояние таймера
0000e8 83be      	std Y + 6, XH
                 
                 TimerISR_NextTimer:
0000e9 9627      	adiw Y, TASK_DATA_SIZE	; переход к следующей задаче
                 
0000ea 954a      	dec R20
0000eb f7a1      	brne TimerISR_Loop
                 
                 TimerISR_NoTasks:
0000ec 91df      	pop YH
0000ed 91cf      	pop YL
0000ee 91bf      	pop XH
0000ef 91af      	pop XL
                 
0000f0 914f      	pop R20
0000f1 bf4f      	out SREG, R20
                 
0000f2 914f      	pop R20
                 
0000f3 9518      	reti
                 
                 
                 
                 Init:
                 ;========================================== настройка периферии ====================================
                 
                 	; DDR = 0 - вход, 1 - выход
                 	; PORT - значение на выходе при DDR = 1 или наличие подтяжки при DDR = 0 (0 - режим Hi-Z, 1 - подтяжка)
                 
0000f4 9a25      	sbi DDRB, LED_PIN		; установка режима порта на выход для мигания светодиодом
                 
                 ;======================================  инициализация переменных ===================================
                 
                 
                 ;======================================  инициализация задач ========================================
                 
0000f5 e0e2
0000f6 e0f1
0000f7 e001
0000f8 9301
0000f9 e800
0000fa 9301
0000fb e001
0000fc 9301
0000fd 2700
0000fe 9301
0000ff 9301
000100 9301
000101 8300      	_AddTask TASKID_EEPROM, TaskEEPROM, (1<<TASK_STATE_ACTIVE_BIT)|(0<<TASK_STATE_CONT_BIT), 0
                 
000102 9508      	ret
                 
                 ;============================================= Task routines =======================================
                 
                 .equ EEPROM_SIZE_GREATER_256 = 1
                 .include "eeprom.inc"
                 
                 // Для использования процедур необходимо определить константу EEPROM_SIZE_GREATER_256
                 //	.equ EEPROM_SIZE_GREATER_256 = 1 - для МК с количеством EEPROM более 256 байт
                 //	.equ EEPROM_SIZE_GREATER_256 = 0 - для МК с количеством EEPROM менее или равно 256 байт
                 // В EEPROM записываются три значения в разные блоки памяти
                 // При считывании они проверяются на равенство и при несовпадении одного из них автоматически корректируются
                 // максимальное количество записываемых значений Мин(256, (EEPROM_SIZE - 8) div 3))
                 
                 .ifndef EEPROM_SIZE_GREATER_256
                 .endif
                 
                 .CSEG
                 
                 //=============================================
                 ; Процедура записи чтения значения в EEPROM
                 ; В R16 - номер записываемой переменной
                 ; В R17 - записываемое значение
                 WriteEEPROM:
000103 93af      	push XL
                 	.if EEPROM_SIZE_GREATER_256 != 0
000104 93bf      		push XH
                 	.endif
                 
                 	; вычисляем адреса по номеру переменной по формуле: Addr1 = (X div 4) * 12 + 8; Addr2 = Addr1 + 4; Addr3 = Addr2 + 4
000105 2fa0      	mov XL, R16
000106 7fac      	andi XL, 0b11111100
                 	.if EEPROM_SIZE_GREATER_256 != 0
000107 27bb      		clr XH
000108 1faa      		rol XL
000109 1fbb      		rol XH
00010a 0fa0      		add XL, R16
00010b 40b0      		sbci XH, 0
00010c 9618      		adiw X, 8
                 	.else
                 	.endif
                 
00010d e033      	ldi R19, 3					; количество считываемых значений
                 
                 WriteEEPROM_Loop:
00010e 94f8      	cli
00010f 9bf9      	sbis EECR, EEPE
000110 c00a      	rjmp WriteEEPROM_Ready
                 
000111 9478      	sei
000112 931f      	push R17
000113 933f      	push R19
000114 e001
000115 e010
000116 940e 009b 	_DelayTask 1				; EEPROM не готова, делаем паузу в 1мс
000118 913f      	pop R19
000119 911f      	pop R17
                 
00011a cff3      	rjmp WriteEEPROM_Loop
                 
                 WriteEEPROM_Ready:
                 	.if EEPROM_SIZE_GREATER_256 != 0
00011b bdb2
00011c bda1      		_outW EEARL, XL, XH
                 	.else
                 	.endif
00011d 9af8      	sbi EECR, EERE
00011e b520      	_in R18, EEDR				; сначала считываем текущее значение
                 
00011f 2721      	eor R18, R17				; если оно равно записываемому - ничего не делаем
000120 f061      	breq WriteEEPROM_Next
                 
000121 98fd      	cbi EECR, EEPM1				; устанавливаем по умолчанию режим "стирание + запись"
000122 98fc      	cbi EECR, EEPM0
                 
000123 2321      	and R18, R17				; определяем, если ли биты, изменяемые из 0 в 1. Если нет, то операция стирания ячейки не нужна - только запись
000124 f021      	breq WriteEEPROM_WriteMode
                 	
000125 3f1f      	cpi R17, 0xFF				; если записываемое значение равно 0xFF, то достаточно только стереть ячейку без необходимости проводить запись
000126 f419      	brne WriteEEPROM_WriteData
                 
000127 9afc      	sbi EECR, EEPM0				; режим "только стирание"
000128 c001      	rjmp WriteEEPROM_WriteData
                 
                 WriteEEPROM_WriteMode:
000129 9afd      	sbi EECR, EEPM1				; режим "только запись"
                 
                 WriteEEPROM_WriteData:
00012a bd10      	_out EEDR, R17
00012b 9afa      	sbi EECR, EEMPE
00012c 9af9      	sbi EECR, EEPE
                 
                 WriteEEPROM_Next:
00012d 9478      	sei
                 
                 	.if EEPROM_SIZE_GREATER_256 != 0
00012e 9614      		adiw X, 4
                 	.else
                 	.endif
                 
00012f 953a      	dec R19
000130 f6e9      	brne WriteEEPROM_Loop
                 
                 	; для уменьшения вероятности сбоев записываем в регистр адреса 0
000131 94f8      	cli
000132 2711      	clr R17
                 	.if EEPROM_SIZE_GREATER_256 != 0
000133 bd12
000134 bd11      		_outW EEARL, R17, R17
                 	.else
                 	.endif
000135 9478      	sei
                 
                 	.if EEPROM_SIZE_GREATER_256 != 0
000136 91bf      		pop XH
                 	.endif
000137 91af      	pop XL
                 
000138 9508      	ret
                 
                 //=============================================
                 ; Функция чтения значения из EEPROM
                 ; В R16 - номер считываемой переменной
                 ; Возвращает:
                 ; В R17 - считанное значение
                 ReadEEPROM:
                 
000139 93af      	push XL
                 	.if EEPROM_SIZE_GREATER_256 != 0
00013a 93bf      		push XH
                 	.endif
                 
                 	; вычисляем адреса по номеру переменной по формуле: Addr1 = (X div 4) * 12 + 8; Addr2 = Addr1 + 4; Addr3 = Addr2 + 4
00013b 2fa0      	mov XL, R16
00013c 7fac      	andi XL, 0b11111100
                 	.if EEPROM_SIZE_GREATER_256 != 0
00013d 27bb      		clr XH
00013e 1faa      		rol XL
00013f 1fbb      		rol XH
000140 0fa0      		add XL, R16
000141 40b0      		sbci XH, 0
000142 9618      		adiw X, 8
                 	.else
                 	.endif
                 
000143 e033      	ldi R19, 3				; количество считываемых значений
                 
                 ReadEEPROM_Loop:
000144 94f8      	cli
000145 9bf9      	sbis EECR, EEPE
000146 c008      	rjmp ReadEEPROM_Ready
                 
000147 9478      	sei
000148 933f      	push R19
000149 e001
00014a e010
00014b 940e 009b 	_DelayTask 1				; EEPROM не готова, делаем паузу в 1мс
00014d 913f      	pop R19
                 
00014e cff5      	rjmp ReadEEPROM_Loop
                 
                 ReadEEPROM_Ready:
                 	.if EEPROM_SIZE_GREATER_256 != 0
00014f bdb2
000150 bda1      		_outW EEARL, XL, XH
                 	.else
                 	.endif
000151 9af8      	sbi EECR, EERE
000152 b500      	_in R16, EEDR
                 
000153 9478      	sei
                 	
000154 930f      	push R16
                 
                 	.if EEPROM_SIZE_GREATER_256 != 0
000155 9614      		adiw X, 4
                 	.else
                 	.endif
                 
000156 953a      	dec R19
000157 f761      	brne ReadEEPROM_Loop
                 
                 	; три считанных значения в регистрах R16, R17, R18
000158 912f      	pop R18
000159 911f      	pop R17
00015a 910f      	pop R16
                 
                 	; сравниваем считанные значения
00015b 1701      	cp R16, R17
00015c f421      	brne ReadEEPROM_CheckR18
                 
00015d 1702      	cp R16, R18
00015e f0c9      	breq ReadEEPROM_Exit		; все три значения одинаковые
                 
                 	; ошибка при чтении третьего значения (в R18)
                 	.if EEPROM_SIZE_GREATER_256 != 0
00015f 9714      		sbiw X, 4
                 	.else
                 	.endif
                 
000160 c006      	rjmp ReadEEPROM_Repair
                 
                 ReadEEPROM_CheckR18:
000161 1702      	cp R16, R18
000162 f011      	breq ReadEEPROM_ErrorR17
                 
                 	; ошибка при чтении первого значения (в R16)
                 	.if EEPROM_SIZE_GREATER_256 != 0
000163 971c      		sbiw X, 12
                 	.else
                 	.endif
                 
000164 c002      	rjmp ReadEEPROM_Repair
                 
                 ReadEEPROM_ErrorR17:
                 	; ошибка при чтении второго значения (в R17)
                 	.if EEPROM_SIZE_GREATER_256 != 0
000165 9718      		sbiw X, 8
                 	.else
                 	.endif
                 
000166 2f10      	mov R17, R16
                 
                 ReadEEPROM_Repair:				; исправляем ошибку чтения - записываем правильное значение
000167 94f8      	cli
000168 9bf9      	sbis EECR, EEPE
000169 c008      	rjmp ReadEEPROM_ReadyForWrite
                 
00016a 9478      	sei
00016b 931f      	push R17
00016c e001
00016d e010
00016e 940e 009b 	_DelayTask 1				; EEPROM не готова, делаем паузу в 1мс
000170 911f      	pop R17
                 
000171 cff5      	rjmp ReadEEPROM_Repair
                 
                 ReadEEPROM_ReadyForWrite:
                 	.if EEPROM_SIZE_GREATER_256 != 0
000172 bdb2
000173 bda1      		_outW EEARL, XL, XH
                 	.else
                 	.endif
000174 bd10      	_out EEDR, R17
                 
000175 9afa      	sbi EECR, EEMPE
000176 9af9      	sbi EECR, EEPE
000177 9478      	sei
                 
                 ReadEEPROM_Exit:
                 	; для уменьшения вероятности сбоев записываем в регистр адреса 0
000178 94f8      	cli
000179 2700      	clr R16
                 	.if EEPROM_SIZE_GREATER_256 != 0
00017a bd02
00017b bd01      		_outW EEARL, R16, R16
                 	.else
                 	.endif
00017c 9478      	sei
                 
                 	.if EEPROM_SIZE_GREATER_256 != 0
00017d 91bf      		pop XH
                 	.endif
00017e 91af      	pop XL
                 
00017f 9508      	ret
                 
                 
                 TaskEEPROM:
                 
000180 e001      	ldi R16, 1
000181 ef1f      	ldi R17, 0xff
000182 df80      	rcall WriteEEPROM
                 
000183 e000      	ldi R16, 0
000184 e213      	ldi R17, 0x23
000185 df7d      	rcall WriteEEPROM
                 
000186 e001      	ldi R16, 1
000187 e010      	ldi R17, 0
000188 df7a      	rcall WriteEEPROM
                 
000189 e002      	ldi R16, 2
00018a ef1f      	ldi R17, 0xFF
00018b df77      	rcall WriteEEPROM
                 
00018c e000      	ldi R16, 0
00018d 940e 0139 	call ReadEEPROM
00018f e041      	ldi R20, 1
000190 3213      	cpi R17, 0x23
000191 f541      	brne TaskEEPROM_Error
                 
000192 e001      	ldi R16, 1
000193 940e 0139 	call ReadEEPROM
000195 e042      	ldi R20, 2
000196 3010      	cpi R17, 0
000197 f511      	brne TaskEEPROM_Error
                 
000198 e002      	ldi R16, 2
000199 940e 0139 	call ReadEEPROM
00019b e043      	ldi R20, 3
00019c 3f1f      	cpi R17, 0xff
00019d f4e1      	brne TaskEEPROM_Error
                 	///////////////////
                 
00019e e000      	ldi R16, 0
00019f e314      	ldi R17, 0x34
0001a0 df62      	rcall WriteEEPROM
                 
0001a1 e001      	ldi R16, 1
0001a2 e017      	ldi R17, 7
0001a3 df5f      	rcall WriteEEPROM
                 
0001a4 e002      	ldi R16, 2
0001a5 e110      	ldi R17, 0x10
0001a6 df5c      	rcall WriteEEPROM
                 
                 
0001a7 e000      	ldi R16, 0
0001a8 940e 0139 	call ReadEEPROM
0001aa e044      	ldi R20, 4
0001ab 3314      	cpi R17, 0x34
0001ac f469      	brne TaskEEPROM_Error
                 
0001ad e001      	ldi R16, 1
0001ae 940e 0139 	call ReadEEPROM
0001b0 e045      	ldi R20, 5
0001b1 3017      	cpi R17, 7
0001b2 f439      	brne TaskEEPROM_Error
                 
0001b3 e002      	ldi R16, 2
0001b4 940e 0139 	call ReadEEPROM
0001b6 e046      	ldi R20, 6
0001b7 3110      	cpi R17, 0x10
0001b8 f409      	brne TaskEEPROM_Error
                 
0001b9 c011      	rjmp TaskEEPROM_OK
                 
                 TaskEEPROM_Error:
0001ba ee08
0001bb e013
0001bc 940e 009b 	_DelayTask 1000
                 
                 T1_Loop:
0001be 9a2d      	sbi LED_PORT, LED_PIN
0001bf ef04
0001c0 e011
0001c1 940e 009b 	_DelayTask 500
0001c3 982d      	cbi LED_PORT, LED_PIN
0001c4 ee08
0001c5 e013
0001c6 940e 009b 	_DelayTask 1000
                 
0001c8 954a      	dec R20
0001c9 f7a1      	brne T1_Loop
                 
                 TaskEEPROM_Exit:
0001ca 9508      	ret
                 
                 TaskEEPROM_OK:
0001cb ee08
0001cc e013
0001cd 940e 009b 	_DelayTask 1000
0001cf 9a2d      	sbi LED_PORT, LED_PIN
0001d0 e604
0001d1 e010
0001d2 940e 009b 	_DelayTask 100
0001d4 982d      	cbi LED_PORT, LED_PIN
0001d5 ec08
0001d6 e010
0001d7 940e 009b 	_DelayTask 200
0001d9 9a2d      	sbi LED_PORT, LED_PIN
0001da e604
0001db e010
0001dc 940e 009b 	_DelayTask 100
0001de 982d      	cbi LED_PORT, LED_PIN
0001df ec08
0001e0 e010
0001e1 940e 009b 	_DelayTask 200
0001e3 9a2d      	sbi LED_PORT, LED_PIN
0001e4 e604
0001e5 e010
0001e6 940e 009b 	_DelayTask 100
0001e8 982d      	cbi LED_PORT, LED_PIN
0001e9 cfe0      	rjmp TaskEEPROM_Exit
                 
                 
                 ;============================================ DATA Segment ========================================
                 
                 .DSEG


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega168" register use summary:
r0 :   1 r1 :   1 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  90 r17:  49 r18:  22 r19:  12 r20:  26 r21:   2 r22:   2 r23:   2 
r24:   2 r25:   2 r26:  24 r27:  20 r28:  12 r29:  12 r30:   6 r31:   6 
x  :  10 y  :  25 z  :   9 
Registers used: 21 out of 35 (60.0%)

"ATmega168" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   3 adiw  :   6 and   :   2 
andi  :   3 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   2 break :   0 breq  :   8 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  17 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :  19 cbi   :   6 cbr   :   3 
clc   :   1 clh   :   0 cli   :   8 cln   :   0 clr   :   8 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   3 cpc   :   0 
cpi   :   7 cpse  :   0 dec   :   8 eor   :   1 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   1 ijmp  :   0 in    :   3 inc   :   0 jmp   :   2 
ld    :   6 ldd   :   8 ldi   :  85 lds   :   2 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :   3 movw  :   0 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   1 ori   :   1 out   :  16 pop   :  34 
push  :  32 rcall :   7 ret   :   5 reti  :  25 rjmp  :  16 rol   :   4 
ror   :   0 sbc   :   0 sbci  :   3 sbi   :  13 sbic  :   0 sbis  :   3 
sbiw  :   4 sbr   :   2 sbrc  :   2 sbrs  :   1 sec   :   0 seh   :   0 
sei   :  12 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   1 spm   :   0 st    :  14 std   :   6 sts   :   9 
sub   :   1 subi  :   0 swap  :   0 tst   :   2 wdr   :   3 
Instructions used: 52 out of 113 (46.0%)

"ATmega168" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003d4    932      0    932   16384   5.7%
[.dseg] 0x000100 0x00010f      0     15     15    1024   1.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
